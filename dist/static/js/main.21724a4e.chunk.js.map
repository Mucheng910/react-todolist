{"version":3,"sources":["components/TodoTextInput.js","components/Header.js","constants/ActionTypes.js","actions/index.js","containers/Header.js","components/Link.js","containers/FilterLink.js","components/Footer.js","constants/TodoFilters.js","components/TodoItem.js","components/TodoList.js","selectors/index.js","containers/VisibleTodoList.js","components/MainSection.js","containers/MainSection.js","components/App.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","index.js"],"names":["TodoTextInput","state","text","_this","props","handleSubmit","e","target","value","trim","which","onSave","newTodo","setState","handleChange","handleBlur","react_default","a","createElement","className","classnames","edit","this","editing","new-todo","type","placeholder","autoFocus","onBlur","onChange","onKeyDown","Component","Header","_ref","addTodo","TodoTextInput_TodoTextInput","length","ADD_TODO","DELETE_TODO","EDIT_TODO","COMPLETE_TODO","COMPLETE_ALL_TODOS","CLEAR_COMPLETED","types","deleteTodo","id","editTodo","completeTodo","completeAllTodos","clearCompleted","setVisibilityFilter","filter","connect","Link","active","children","setFilter","selected","style","cursor","onClick","ownProps","visibilityFilter","dispatch","FILTER_TITLES","_FILTER_TITLES","Object","defineProperty","Footer","activeCount","completedCount","onClearCompleted","itemWord","keys","map","key","FilterLink","TodoItem","handleDoubleClick","handleSave","element","_this2","_this$props","todo","checked","completed","onDoubleClick","TodoList","filteredTodos","actions","TodoItem_TodoItem","assign","getTodos","todos","getVisibleTodos","createSelector","t","Error","getCompletedTodoCount","reduce","count","VisibleTodoList","bindActionCreators","TodoActions","MainSection","todosCount","readOnly","containers_VisibleTodoList","components_Footer","App","containers_Header","containers_MainSection","initialState","arguments","undefined","action","rootReducer","combineReducers","toConsumableArray","concat","maxId","Math","max","objectSpread","areAllMarked","every","store","createStore","reducer","render","react_redux_es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.21724a4e.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\n\nexport default class TodoTextInput extends Component {\n  // static 定义的是类的方法只有类能调用,静态类，静态变量，内存中不消失\n  static propTypes = {\n    onSave: PropTypes.func.isRequired, \n    text: PropTypes.string,\n    placeholder: PropTypes.string,\n    editing: PropTypes.bool,\n    // 布尔值\n    newTodo: PropTypes.bool\n  }\n\n  state = {\n    text: this.props.text || ''\n  }\n\n  handleSubmit = e => {\n    const text = e.target.value.trim()\n    // 去掉最开始的空格\n    if (e.which === 13) {\n      // 回车键\n      this.props.onSave(text)\n      if (this.props.newTodo) {\n        this.setState({ text: '' })\n      }\n    }\n  }\n\n  handleChange = e => {\n    this.setState({ text: e.target.value })\n  }\n  /* handleChange：默认的值修改回调函数，传入参数为 e: React.ChangeEvent<any> 对象。\n所以如果使用antd-mobile组件，由于某些组件传入参数为 value 值，因此需要对此进行一定程度上的封装*/\n  // this就是指向当前事件所绑定的元素，而e.target指向事件执行时鼠标所点击区域的那个元素\n\n  handleBlur = e => {\n    if (!this.props.newTodo) {\n      this.props.onSave(e.target.value)\n    }\n    /* handleBlur：失去焦点时默认的回调函数，传入参数为 event 对象。\n 需要自定义时也需要对应的封装。这个函数和handleChange都是DOM-only的函数 */\n  }\n\n  render() {\n    return (\n      <input className={\n        classnames({\n          edit: this.props.editing,\n          'new-todo': this.props.newTodo\n        })}\n        type=\"text\"\n        placeholder={this.props.placeholder}\n        autoFocus={true}\n        value={this.state.text}\n        onBlur={this.handleBlur}\n        onChange={this.handleChange}\n        onKeyDown={this.handleSubmit} />\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport TodoTextInput from './TodoTextInput'\n\nconst Header = ({ addTodo }) => (\n  <header className=\"header\">\n    <h1>todos</h1>\n    <TodoTextInput\n      newTodo\n      onSave={(text) => {\n        if (text.length !== 0) {\n          addTodo(text)\n        }\n      }}\n      placeholder=\"What needs to be done?\"\n    />\n  </header>\n)\n// 定义一个Header组件\n\nHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired\n}\n// 之前定义过的 Addtodo Action\n// 使用prop-types来记录传递给组件的props,如果它们不匹配将发出警告\nexport default Header\n","export const ADD_TODO = 'ADD_TODO'\nexport const DELETE_TODO = 'DELETE_TODO'\nexport const EDIT_TODO = 'EDIT_TODO'\nexport const COMPLETE_TODO = 'COMPLETE_TODO'\nexport const COMPLETE_ALL_TODOS = 'COMPLETE_ALL_TODOS'\nexport const CLEAR_COMPLETED = 'CLEAR_COMPLETED'\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER'\n","import * as types from '../constants/ActionTypes'\n\n\n//   添加新todo任务的 Action\nexport const addTodo = text => ({ type: types.ADD_TODO, text })\n// 删除todoList的 Action\nexport const deleteTodo = id => ({ type: types.DELETE_TODO, id })\n// 编辑todo 任务的 Action\nexport const editTodo = (id, text) => ({ type: types.EDIT_TODO, id, text })\n// 选中和未选中单个的todo 任务的 Action\nexport const completeTodo = id => ({ type: types.COMPLETE_TODO, id })\n// 选中和未选中整个todoLists任务的 Action\nexport const completeAllTodos = () => ({ type: types.COMPLETE_ALL_TODOS })\n// 删除所有选中任务的todoList任务的 Action\nexport const clearCompleted = () => ({ type: types.CLEAR_COMPLETED })\n// 当前的任务展示选项 Action\nexport const setVisibilityFilter = filter => ({ type: types.SET_VISIBILITY_FILTER, filter})\n\n","import { connect } from 'react-redux'\nimport Header from '../components/Header'\nimport { addTodo } from '../actions'\n\nexport default connect(\n    null, \n    { addTodo }\n)(Header)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\n// 动态css样式\n\nconst Link = ({ active, children, setFilter }) =>\n  (\n    \n    <a\n      className={classnames({ selected: active })}\n      // classnames 为一个标签类名\n      style={{ cursor: 'pointer' }}\n      // 样式鼠标移动上去变成一个手\n      onClick={() => setFilter()}\n    >\n      {children}\n    </a>\n  )\n\n\nLink.propTypes = {\n  active: PropTypes.bool.isRequired,\n  // .isRequired 为props不匹配的时候可以发出警告\n  children: PropTypes.node.isRequired,\n  setFilter: PropTypes.func.isRequired\n}\n\nexport default Link\n","import { connect } from 'react-redux'\nimport { setVisibilityFilter } from '../actions'\nimport Link from '../components/Link'\n\n// 使用 connect() 前，需要先定义 mapStateToProps 这个函数来指定如何把当前 Redux store state 映射到展示组件的 props 中。\n// VisibleTodoList 需要计算传到 TodoList 中的 todos，所以定义了根据 state.visibilityFilter 来过滤 state.todos 的方法，并在 mapStateToProps 中使用。\nconst mapStateToProps = (state, ownProps) => ({\n  active: ownProps.filter === state.visibilityFilter\n})\n\n// 除了读取 state，容器组件还能分发 action。类似的方式，可以定义 mapDispatchToProps() 方法接收 dispatch() 方法并返回期望注入到展示组件的 props 中的回调方法。\n// VisibleTodoList 向 TodoList 组件中注入一个叫 onTodoClick 的 props ，还希望 onTodoClick 能分发 TOGGLE_TODO 这个 action：\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  setFilter: () => {\n    dispatch(setVisibilityFilter(ownProps.filter))\n  }\n})\n// 使用 connect() 创建 VisibleTodoList，并传入这两个函数\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Link)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n// \nimport FilterLink from '../containers/FilterLink'\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE } from '../constants/TodoFilters'\n\nconst FILTER_TITLES = {\n  [SHOW_ALL]: 'All',\n  [SHOW_ACTIVE]: 'Active',\n  [SHOW_COMPLETED]: 'Completed'\n}\n\nconst Footer = (props) => {\n  const { activeCount, completedCount, onClearCompleted } = props\n  const itemWord = activeCount === 1 ? 'item' : 'items'\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{activeCount || 'No'}</strong> {itemWord} left\n      </span>\n      <ul className=\"filters\">\n        {Object.keys(FILTER_TITLES).map(filter =>\n          <li key={filter}>\n            <FilterLink filter={filter}>\n              {FILTER_TITLES[filter]}\n            </FilterLink>\n          </li>\n        )}\n      </ul>\n      {\n        !!completedCount &&\n        // !取反 &&相当于if语句\n        // 如果有completeCount 的话出现 Clear completed 按钮\n        <button\n          className=\"clear-completed\"\n          onClick={onClearCompleted}\n        >Clear completed</button>\n        \n      }\n    </footer>\n  )\n}\n\nFooter.propTypes = {\n  completedCount: PropTypes.number.isRequired,\n  activeCount: PropTypes.number.isRequired,\n  onClearCompleted: PropTypes.func.isRequired,\n}\n\nexport default Footer\n","export const SHOW_ALL = 'show_all'\nexport const SHOW_COMPLETED = 'show_completed'\nexport const SHOW_ACTIVE = 'show_active'\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport TodoTextInput from './TodoTextInput'\n\nexport default class TodoItem extends Component {\n  static propTypes = {\n    todo: PropTypes.object.isRequired,\n    editTodo: PropTypes.func.isRequired,\n    deleteTodo: PropTypes.func.isRequired,\n    completeTodo: PropTypes.func.isRequired\n  }\n\n  state = {\n    editing: false\n  }\n  // 定义默认的 编辑state状态为false\n\n  handleDoubleClick = () => {\n    this.setState({ editing: true })\n  }\n  // 用户双击可以触发的函数\n\n  handleSave = (id, text) => {\n    if (text.length === 0) {\n      this.props.deleteTodo(id)\n      // 如果编辑后的输入框文字长度=0,就删除这个todo任务\n    } else {\n      this.props.editTodo(id, text)\n      // 如果编辑后的输入框文子长度!=0,改变输入框的内容\n    }\n    this.setState({ editing: false })\n  }\n\n  render() {\n    // react生命周期中的组件渲染部分\n    const { todo, completeTodo, deleteTodo } = this.props\n\n    let element\n    if (this.state.editing) {\n      element = (\n        <TodoTextInput text={todo.text}\n                       editing={this.state.editing}\n                       onSave={(text) => this.handleSave(todo.id, text)} />\n      )\n      // 保存编辑后的的text和id\n    } else {\n      element = (\n        <div className=\"view\">\n          <input className=\"toggle\"\n                 type=\"checkbox\"\n                 checked={todo.completed}\n                 onChange={() => completeTodo(todo.id)} />\n                 {/* √ */}\n          <label onDoubleClick={this.handleDoubleClick}>\n            {todo.text}\n          </label>\n          {/* todo列表内容 */}\n          <button className=\"destroy\"\n                  onClick={() => deleteTodo(todo.id)} />\n                  {/* 删除按钮 */}\n        </div>\n      )\n    }\n\n    return (\n      <li className={classnames({\n        completed: todo.completed,\n        editing: this.state.editing\n      })}>\n        {element}\n      </li>\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport TodoItem from './TodoItem'\n\nconst TodoList = ({ filteredTodos, actions }) => (\n  <ul className=\"todo-list\">\n    {filteredTodos.map(todo =>\n      <TodoItem key={todo.id} todo={todo} {...actions} />\n    )}\n  </ul>\n)\n// todoList组件,生成列表\n\nTodoList.propTypes = {\n  \n  filteredTodos: \n  PropTypes.arrayOf(\n    PropTypes.shape({\n      // 指定对象的结构\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      text: PropTypes.string.isRequired \n  }).isRequired).isRequired,\n\n  actions: PropTypes.object.isRequired\n}\n\n\n// 布尔值 bool\n// bool: PropTypes.bool\n// 函数 function\n// func: PropTypes.func\n// 数字, 包括 int 和 float\n// number: PropTypes.number\n// 字符串 string\n// string: PropTypes.string\n// React元素 element包括我们自己写的各种React component， 以及常见的 {this.props.children}\n// element: PropTypes.element\n// 数组 Array\n// array: PropTypes.array\n// 数组 Array, 指定每个元素类型\n// 指定数组中的元素类型为 number\n// array: PropTypes.arrayOf(PropTypes.number)\n// 对象 object\n// obj: PropTypes.object\n// 对象 object， 指定每个值的类型\n// // 指定该对象的值为number\n// obj: PropTypes.objectOf(PropTypes.number)\n\n// 对象 object， 指定对象结构\n// object: {\n//   name: 'name',\n//   password: 'password'\n// }\n// obj: PropTypes.shape({\n//   name: PropTypes.string,\n//   name: PropTypes.string\n// })\n\n// 同时指定多种类型\n\n// oneOfTypes: React.PropTypes.oneOfType([\n//       React.PropTypes.string,\n//       React.PropTypes.number\n//     ])\n// 还可以限定属性的值\n\n// 限定enum的值只能为'news' 或者 'photos'\n// enum: PropTypes.oneOf(['news', 'photos'])\nexport default TodoList\n","import { createSelector } from 'reselect'\n// 创建可记忆的 Selector,Reselect 库可以创建可记忆的(Memoized)、可组合的 selector 函数。Reselect selectors 可以用来高效地计算 Redux store 里的衍生数据。\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE } from '../constants/TodoFilters'\n\nconst getVisibilityFilter = state => state.visibilityFilter\nconst getTodos = state => state.todos\n\nexport const getVisibleTodos = createSelector(\n  [getVisibilityFilter, getTodos],\n  // createSelector 接收一个 input-selectors 数组和一个转换函数作为参数。如果 state tree 的改变会引起 input-selector 值变化，那么 selector 会调用转换函数，传入 input-selectors 作为参数，并返回结果。如果 input-selectors 的值和前一次的一样，它将会直接返回前一次计算的数据，而不会再调用一次转换函数\n  (visibilityFilter, todos) => {\n    switch (visibilityFilter) {\n      case SHOW_ALL:\n        return todos\n      case SHOW_COMPLETED:\n        return todos.filter(t => t.completed)\n      case SHOW_ACTIVE:\n        return todos.filter(t => !t.completed)\n      default:\n        throw new Error('Unknown filter: ' + visibilityFilter)\n    }\n  }\n)\n// 转换函数来过滤 todos 列表 状态\n\nexport const getCompletedTodoCount = createSelector(\n  [getTodos],\n  todos => (\n    todos.reduce((count, todo) =>\n      todo.completed ? count + 1 : count,\n      0\n    )\n  )\n)\n// 转换函数来更新todos列表的数量","import { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as TodoActions from '../actions'\nimport TodoList from '../components/TodoList'\nimport { getVisibleTodos } from '../selectors'\n\nconst mapStateToProps = state => ({\n  filteredTodos: getVisibleTodos(state)\n  // 过滤todolist的状态\n})\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(TodoActions, dispatch)\n})\n\n\nconst VisibleTodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList)\n\nexport default VisibleTodoList\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Footer from './Footer'\nimport VisibleTodoList from '../containers/VisibleTodoList'\n\nconst MainSection = ({ todosCount, completedCount, actions }) =>\n  (\n    <section className=\"main\">\n      {\n        !!todosCount && \n        <span>\n          <input\n            className=\"toggle-all\"\n            type=\"checkbox\"\n            checked={completedCount === todosCount}\n            // flase:未选中,true:选中\n            readOnly\n            // 就像readonly 的dom节点api 一样\n          />\n          <label onClick={actions.completeAllTodos}/>\n        </span>\n      }\n      <VisibleTodoList />\n      {  \n         !!todosCount &&\n        <Footer\n          completedCount={completedCount}\n          activeCount={todosCount - completedCount}\n          onClearCompleted={actions.clearCompleted}\n        />\n      }\n    </section>\n  )\n  // 定义了一个MainSection组件\n\nMainSection.propTypes = {\n  todosCount: PropTypes.number.isRequired,\n  completedCount: PropTypes.number.isRequired,\n  actions: PropTypes.object.isRequired\n}\n\nexport default MainSection;","import { connect } from 'react-redux'\nimport * as TodoActions from '../actions'\nimport { bindActionCreators } from 'redux'\nimport MainSection from '../components/MainSection'\nimport { getCompletedTodoCount } from '../selectors'\n\n\nconst mapStateToProps = state => ({\n  todosCount: state.todos.length,\n  completedCount: getCompletedTodoCount(state) \n  // 更新后todos列表的数量\n})\n\n// 惟一会使用到 bindActionCreators 的场景是当你需要把 action creator 往下传到一个组件上，却不想让这个组件觉察到 Redux 的存在，\n// 而且不希望把 dispatch 或 Redux store 传给它。\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(TodoActions, dispatch)\n})\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MainSection)\n\n","import React from 'react'\nimport Header from '../containers/Header'\nimport MainSection from '../containers/MainSection'\n\nconst App = () => (\n  <div>\n    <Header /> \n    {/* 组件1  包含todo字样,和TodoTextInput组件 (输入框)*/}\n    <MainSection />\n    {/* 组件2 包含todo列表,和底部todoList的任务展示状态栏*/}\n  </div>\n)\n\nexport default App\n","import {\n  ADD_TODO,\n  DELETE_TODO,\n  EDIT_TODO,\n  COMPLETE_TODO,\n  COMPLETE_ALL_TODOS,\n  CLEAR_COMPLETED\n} from '../constants/ActionTypes'\n\nconst initialState = [\n  {\n    text: '完成react-todoList ',\n    completed: false,\n    id: 0\n  }\n]\n// 设置state \n// reducer 就是一个纯函数，接收旧的 state 和 action，返回新的 state\nexport default function todos(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TODO:\n      return [\n        ...state,\n        {\n          id: state.reduce((maxId, todo) => Math.max(todo.id, maxId), -1) + 1,\n          completed: false,\n          text: action.text\n        }\n      ]\n\n    case DELETE_TODO:\n      return state.filter(todo =>\n        todo.id !== action.id\n      )\n\n    case EDIT_TODO:\n      return state.map(todo =>\n        todo.id === action.id ?\n          { ...todo, text: action.text } :\n          todo\n      )\n\n    case COMPLETE_TODO:\n      return state.map(todo =>\n        todo.id === action.id ?\n          { ...todo, completed: !todo.completed } :\n          todo\n      )\n\n    case COMPLETE_ALL_TODOS:\n      const areAllMarked = state.every(todo => todo.completed)\n      return state.map(todo => ({\n        ...todo,\n        completed: !areAllMarked\n      }))\n\n    case CLEAR_COMPLETED:\n      return state.filter(todo => todo.completed === false)\n\n    default:\n      return state\n  }\n}\n","import { SET_VISIBILITY_FILTER } from '../constants/ActionTypes'\nimport { SHOW_ALL } from '../constants/TodoFilters'\n\nconst visibilityFilter = (state = SHOW_ALL, action) => {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return action.filter\n    default:\n      return state\n  }\n}\n\nexport default visibilityFilter","import { combineReducers } from 'redux'\nimport todos from './todos'\nimport visibilityFilter from './visibilityFilter'\n// combineReducers() 所做的只是生成一个函数，这个函数来调用你的一系列 reducer，\n// 每个 reducer 根据它们的 key 来筛选出 state 中的一部分数据并处理，\n// 然后这个生成的函数再将所有 reducer 的结果合并成一个大的对象\nconst rootReducer = combineReducers({\n  todos,\n  visibilityFilter\n})\n\nexport default rootReducer\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport reducer from './reducers'\nimport 'todomvc-app-css/index.css'\n\nconst store = createStore(reducer)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}